ASSIGNMENT PPREDICTION
The purpose of the assignment is to design a model for the prediction / classification of the data. It is possible to use models for classification / regression available within the scikit-learn module.

DATA:
There are X_public data of dimension N samples, where each sample contains an F flag, i.e.
NxF. The corresponding vector y_public of dimension N is published for this data. Data
it can be loaded using numpy.load ().
Verification of your model will be performed on the X_eval data of dimension Ne x F, which is generated
in the same way as X_public.
Passing a vector of predicted classifications that the compiler generates on X_eval's data

RATING:
The person passes the prediction vector y_eval of dimension not the elements. This is completed by the application recommended model for X_eval data.
The success of the prediction will be evaluated by the roc_auc_score scale .
Which achieves the person's accuracy-score value on the X_eval data. Accuracy score has to be above 90%.
WHAT YOU NEED TO SUBMIT:
1. A vector of predicted dimension data of elements, stored using the numpy.save () v command
boring format. The file name must be y_predikcia.npy. Do not compress !!!
2. Source code to solve (in the case of multiple source code files, is required
compress into one package)
3. Short technical report in pdf format with a scope of about 1, maximum 3 pages consisting of
- theoretical part - brief theoretical description of the used classifier
- solution proposal - solution methodology may contain a justification why it was which
method or function used
- Discussion and results - may contain results that you have achieved
training data, comparison of the different approaches you have tried, conclusions, evaluation etc.

After your reply I will provide you with files necessary for this assignment : X_eval.npy , X_public.npy and y_public.npy.

!!! Also you will have to use only classifiers(SVM, RandomForest, DecisionTree, Gaussian, Neural Net etc.) no regressors.

Recommended procedure for working with distributed data.
1. use one-hot-encoder on all public data
2. divide public training and testing data
3. use fit and transform on training data,
4. apply transform to test data
5. perform grid serach on test data
6. verify the accuracy of the best parameters on the test data
7. use transform encoder on eval data
8. use transform imputer on eval data
9. predict y for eval data